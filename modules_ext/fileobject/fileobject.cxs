Strict
Import reflection
Import brl.filestream

Function LoadObject:Void(file:String,obj:Object)
	Local fl:FileStream = FileStream.Open(file,"r")
	Local text:String =fl.ReadString()
	fl.Close()
	
	Local lines:String[] = text.Split("~n")
	String2Object(lines,obj)
End

Function SaveObject:Void(file:String,obj:Object)
	Local text:String[] = Object2String(obj)
	Local fl:FileStream = FileStream.Open(file,"w")
	Local i:Int=0
	While i<text.Length()
		fl.WriteLine(text[i])'+"~n")
		i+=1
	Wend	
	fl.Close()
End

Function DisplayObject:Void(obj:Object,title:Int=True)
	If title
		Print "==========================="
		Local c:ClassInfo = GetClass(obj)
		Local classname:String=c.Name
		Print "  "+classname
		Print "---------------------------"
	End

	Local text:String[] = Object2String(obj)
	
	Local i:Int=0
	While i<text.Length()
		Print text[i]
		i+=1
	Wend	
End

Function String2Object:Void(lines:String[],obj:Object)	
  Local fields:FieldInfo[]
	Local line:String
	
	Local l:Int=0
	While l<lines.Length()
		Local split:Int=lines[l].Find("=")
		If split>-1
			Local fld:String = lines[l][0..split]
			Local vars:String[] = fld.Split(".")
			Local val:String = lines[l][(split+1)..]
			
			Local f:Object = obj
			
			Local j:Int=0
			While j<vars.Length()
				Local var:String = vars[j]
				
				' check if var has array?
				Local index:Int=-1
				If var.Contains("[")
					index = Int(var[(var.Find("[")+1)..(var.Length-1)])
					var = var[0..(var.Find("["))]
				End
				
				' find var in parent
				Local c:ClassInfo = GetClass(f)
				Local classname:String = c.Name
#If CONFIG="debug"
		If c=Null Then Error("Cant find "+classname+". Have you included #REFLECTION_FILTER=~qfile~q? Where file is the name of the cxs file (without .cxs) with the "+classname+" class")
#End
				Local fields:FieldInfo[] = c.GetFields(False)
				
				Local i:Int=0
				While i<fields.Length()		  
				  If fields[i].Name=var			  
						If j=vars.Length()-1
							' end var, assign value
						  If fields[i].Type.Name[0..26]="cerberus.boxes.ArrayObject"
						  	' array types
						  	Local _type:String = fields[i].Type.Name[27..(fields[i].Type.Name.Length()-1)]
			  				Select _type
					  		Case "Int"
					  			' unbox first
							  	Local k:Int[] = ArrayBoxer<Int>.Unbox( fields[i].GetValue(f) )
					  			' resize if nesscary
					  			If k.Length()<index+1 Then k = k.Resize(index+1)
					  			' assign index with value
					  			k[index] = Int(val)
					  			' box it up
							    fields[i].SetValue(f,ArrayBoxer<Int>.Box(k))
					  		Case "String"
					  			' unbox first
							  	Local k:String[] = ArrayBoxer<String>.Unbox( fields[i].GetValue(f) )
					  			' resize if nesscary
					  			If k.Length()<index+1 Then k = k.Resize(index+1)
					  			' assign index with value
					  			k[index] = String(val)
					  			' box it up
							    fields[i].SetValue(f,ArrayBoxer<String>.Box(k))
					  		Case "Float"
					  			' unbox first
							  	Local k:Float[] = ArrayBoxer<Float>.Unbox( fields[i].GetValue(f) )
					  			' resize if nesscary
					  			If k.Length()<index+1 Then k = k.Resize(index+1)
					  			' assign index with value
					  			k[index] = Float(val)
					  			' box it up
							    fields[i].SetValue(f,ArrayBoxer<Float>.Box(k))
					  		End
							Else
								' plain types
								Select fields[i].Type.Name	
							  Case "cerberus.boxes.StringObject"
							    fields[i].SetValue(f,BoxString(String(val)))
							  Case "cerberus.boxes.FloatObject"
							    fields[i].SetValue(f,BoxFloat(Float(val)))
							  Case "cerberus.boxes.IntObject"
							    fields[i].SetValue(f,BoxInt(Int(val)))
							  End
							End
						Else
							' recurse. set new parent
							f = fields[i].GetValue(f)
							i = fields.Length()
						End
					End
					i+=1  
				Wend
				
				j+=1
			Wend
		End
		l+=1
	Wend
End

Function Object2String:String[](obj:Object)
	Local output:String[]

	output = _FO_GetObjectText(output,obj)
	
	Return output
End

Function String2Objectq:Void(lines:String[],obj:Object)
	output = GetObjectText(output,obj)
	
	Return output
End

Private
' recursive function
Function _FO_GetObjectText:String[](lines:String[],obj:Object,prefix:String="")
	' get class
	Local c:ClassInfo = GetClass(obj)
	Local classname:String=c.Name
	
#If CONFIG="debug"
	If c=Null Then Error("Cant find "+classname+". Have you included #REFLECTION_FILTER=~qfile~q? Where file is the name of the cxs file (without .cxs) with the "+classname+" class")
#End
	
	' get fields
	Local fields:FieldInfo[] = c.GetFields(False)
	
	Local i:Int=0
	While i<fields.Length()	  
	  Local line:String = ""	  
	  ' check for Array
	  If fields[i].Type.Name[0..26]="cerberus.boxes.ArrayObject"
	  	' get Type name
	  	Local _type:String = fields[i].Type.Name[27..(fields[i].Type.Name.Length()-1)]
	  	' if contains . then non cerberus class (dirty)
	  	If _type.Contains(".")
#If CONFIG="debug"
					Print "  "+fields[i].Name+"[] - Arrays of non CerberusX classes are unsupported "
#End
					' The below block should have worked, but ArrayBoxer doesnt support custom types
#rem
			  	Local k:Object[] =  ArrayBoxer<Object>.Unbox(fields[i].GetValue(obj))
			  	Local m:Int=0
			  	While m<k.Length()
						SaveObject(fl,k[m],prefix+fields[i].Name+"["+m+"].")
			  		m+=1
			  	Wend
#end
	  	Else
	  		Select _type
			  Case "Int"
			  	Local k:Int[] = ArrayBoxer<Int>.Unbox( fields[i].GetValue(obj) )
			  	Local m:Int=0
			  	While m<k.Length()
			    	lines = _FO_AddText(lines,prefix+fields[i].Name+"["+m+"]="+k[m])
			  		m+=1
			  	Wend
			  Case "String"
			  	Local k:String[] = ArrayBoxer<String>.Unbox( fields[i].GetValue(obj) )
			  	Local m:Int=0
			  	While m<k.Length()
			    	lines = _FO_AddText(lines,prefix+fields[i].Name+"["+m+"]="+k[m])
			  		m+=1
			  	Wend
			  Case "Float"
			  	Local k:Float[] = ArrayBoxer<Float>.Unbox( fields[i].GetValue(obj) )
			  	Local m:Int=0
			  	While m<k.Length()
			    	lines = _FO_AddText(lines,prefix+fields[i].Name+"["+m+"]="+k[m])
			  		m+=1
			  	Wend
	  		End
	  	End
	  Else
			Select fields[i].Type.Name	
		  Case "cerberus.boxes.StringObject"
		    lines = _FO_AddText(lines,prefix+fields[i].Name+"="+UnboxString(fields[i].GetValue(obj)))
		  Case "cerberus.boxes.FloatObject"
		    lines = _FO_AddText(lines,prefix+fields[i].Name+"="+UnboxFloat(fields[i].GetValue(obj)))
		  Case "cerberus.boxes.IntObject"
		    lines = _FO_AddText(lines,prefix+fields[i].Name+"="+UnboxInt(fields[i].GetValue(obj)))
		  Default
		  	' crude way to detect non cerberus class
		  	If fields[i].Type.Name[0..8]<>"cerberus" Then lines = _FO_GetObjectText(lines,fields[i].GetValue(obj),prefix+fields[i].Name+".")
		  End
	  End
		
		i+=1  
	Wend
	
	Return lines
End

Function _FO_AddText:String[](lines:String[],line:String)
	If line.Trim()<>""
		lines = lines.Resize(lines.Length()+1)
		lines[lines.Length()-1] = line.Trim()
	End
	
	Return lines
End